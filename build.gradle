import org.springframework.boot.gradle.tasks.buildinfo.BuildInfo

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.flywaydb.flyway" version "9.8.1"
}

group = 'com.kodeinc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
springBoot {
	buildInfo()
}


repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.flywaydb:flyway-core"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-jdbc"
	implementation "org.springframework.data:spring-data-jpa:3.1.0"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	//spring security
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.hibernate:hibernate-core:6.1.7.Final"
	implementation "com.zaxxer:HikariCP:5.0.1"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4"
	implementation "org.springframework.boot:spring-boot-starter-actuator:3.1.0"
	implementation "io.jsonwebtoken:jjwt-api:0.11.5"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.5"
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
//	compile group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.10.5'
//Thanks for using https://jar-download.com



	compileOnly "org.projectlombok:lombok"
	runtimeOnly "com.h2database:h2"
	runtimeOnly "org.postgresql:postgresql"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor "org.projectlombok:lombok"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.junit.jupiter:junit-jupiter"
	testImplementation "org.springframework.security:spring-security-test"
	testImplementation "com.h2database:h2"
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testImplementation "org.junit.jupiter:junit-jupiter-engine"
	testImplementation "org.junit.platform:junit-platform-launcher"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.mockito:mockito-inline:5.2.0"




}

test {
	useJUnitPlatform()
}

flyway{
	url = 'jdbc:postgresql://localhost:5432/dev'
	user = 'postgres'
	password = 'admin'
	schemas = ['auth_db']
	driver = 'org.postgresql.Driver'
	placeholders = [
			'keyABC': 'valueXYZ',
			'otherplaceholder': 'value123'
	]
}

//flywayMigrate.dependsOn classes
//datasource:
//url: jdbc:postgresql://localhost:5432/dev?currentSchema=auth_db
//username: postgres
//password: admin

//classes.dependsOn generateBuildInfo

import java.text.SimpleDateFormat
task migrate() {
	doLast {
		if (!project.hasProperty('fileVersion') || !project.fileVersion) {
			println("Please Specify File version by passing -PfileVersion=x")
			return
		}
		if (!project.hasProperty('fileName') || !project.fileName) {
			println("Please Specify File name by passing -PfileName=abc.sql")
			return
		}
		if (!project.fileName.contains(".sql")) {
			println("Please Specify File name extension by passing -PfileName=abc.sql and ensure the file has a valid .sql extension")
			return
		}
		new File("$projectDir/src/main/resources/db/migration", "V${project.fileVersion}_${new SimpleDateFormat('ddMMyyyyHHmmss').format(new Date())}__${project.fileName}").text = ""
		println("Generated File with name -> V${project.fileVersion}_${new SimpleDateFormat('ddMMyyyyHHmmss').format(new Date())}__${project.fileName}")
	}
}
